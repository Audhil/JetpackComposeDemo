plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

android {
    compileSdk 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.xjpackcompose"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation 'androidx.activity:activity-compose:1.5.0-alpha03'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    //  constraint layout
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.0"

    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.38.1"
    kapt "com.google.dagger:hilt-android-compiler:2.38.1"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    kapt "androidx.hilt:hilt-compiler:1.0.0"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0-alpha02'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
//    implementation "com.squareup.okhttp3:okhttp:4.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.0"

    // Accompanist
    implementation "io.coil-kt:coil-compose:1.3.2"

    // Coroutine Lifecycle Scopes
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"

    implementation 'com.android.support:palette-v7:28.0.0'

    // Coil
    implementation "io.coil-kt:coil:1.2.1"
    implementation "com.google.accompanist:accompanist-coil:0.10.0"

    //  runtime permission
    implementation "com.google.accompanist:accompanist-permissions:0.21.1-beta"

    //  google maps
    implementation "com.google.maps.android:maps-compose:1.0.0"
    implementation "com.google.android.gms:play-services-maps:18.0.2"
    //  room db
    def room_version = "2.4.2"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    //  proto data store
    implementation "androidx.datastore:datastore:1.0.0"
    implementation "org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.5"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2"

    //  testing flows
    testImplementation 'app.cash.turbine:turbine:0.7.0'
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.1"
}

//  uncomment tasks to get outputs
//  custom gradle tasks @ https://www.youtube.com/watch?v=2SWgl-OdxDY&t=2s&ab_channel=PhilippLackner
/*
    o/p
         > Configure project :app
            Jack and jill!
            Hi all! then! how!
        > Task :app:helloWorld UP-TO-DATE
        NOTE: these lines executed when the task is configured
    */
//task helloWorld() {
//    println "Jack and jill!"
//    println "Hi all! then! how!"
//}

//  life cycle call backs of task
/*
    o/p
        > Configure project :app
        Hi hello!!

        > Task :app:helloWorld2
        executed first!
        executed last!
    */
//task helloWorld2 {
//    doFirst {
//        println "executed first!"
//    }
//    println "Hi hello!!"
//    doLast {
//        println "executed last!"
//    }
//}

//  register task inside of a task(following code registers the task, it doesn't runs it),
//  to run registered task use ./gradlew in terminal
//task helloWorld3 {
//    10.times { i ->
//        tasks.register("task$i") {
//            doLast {
//                println "hello from task $i"
//            }
//        }
//    }
//}

//  dependsOn - running tasks inside another task
//task helloWorld4 {
//    10.times { i ->
//        tasks.register("task_$i") {
//            doLast {
//                println "hello from task_$i"
//            }
//        }
//    }
//    println "I'm from helloWorld 4"
//    dependsOn "task_2"
//    println "I'm from helloWorld 4, I'm last line"
//}

//  more about dependsOn
//task helloWorld5 {
//    10.times { i ->
//        tasks.register("task__$i") {
//            doLast {
//                println "hello from task__$i"
//            }
//        }
//    }
//    tasks.named("task__2") {
//        dependsOn "task__4", "task__6", "task__8"
//    }
//    dependsOn "task__2"
//}

//  real world tasks - customized
//task copyApk(type: Copy) {
task copyApk(type: Copy, dependsOn: "test") {   //  runs unit test, then this custom task
    def sourceDir = layout.buildDirectory.dir("intermediates/apk/debug/app-debug.apk")
    def destDir = "$rootDir/apk"
    from sourceDir
    into destDir
    rename "app-debug.apk", "gradle-experiment.apk"
    //  checksum
    doLast {
        def file = new File(destDir, "gradle-experiment.apk")
        ant.checksum file: file.path
    }
}

tasks.whenTaskAdded { task ->
    //  "assembleDebug" is the task executed just before .apk is assembled, it is auto triggered when we "Rebuild Project"
    if (task.name == "assembleDebug") {
        task.finalizedBy "copyApk"  //  "copyApk" task is executed once "assembleDebug" task is ran
    }
}